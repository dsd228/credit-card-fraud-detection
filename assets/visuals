import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, roc_curve, auc
from sklearn.decomposition import PCA
import numpy as np

# --- CONFIGURACIÓN ---
# Carga tus datos (reemplaza con tu ruta)
# df = pd.read_csv('path/to/your/creditcard.csv')

# Para demostración, creamos datos falsos con estructura similar
np.random.seed(42)
n_samples = 284807
n_fraud = 492
n_normal = n_samples - n_fraud
X_normal = pd.DataFrame(np.random.randn(n_normal, 28) * 0.5, columns=[f'V{i+1}' for i in range(28)])
X_fraud = pd.DataFrame(np.random.randn(n_fraud, 28) * 2.5, columns=[f'V{i+1}' for i in range(28)])
df = pd.concat([
    pd.DataFrame({'Time': np.random.rand(n_normal) * 172792, 'Amount': np.random.lognormal(2, 1, n_normal), 'Class': 0}),
    X_normal,
    pd.DataFrame({'Time': np.random.rand(n_fraud) * 172792, 'Amount': np.random.lognormal(1.5, 1, n_fraud), 'Class': 1}),
    X_fraud
]).reset_index(drop=True)

# Simula predicciones del modelo para la matriz de confusión y ROC
# En tu caso, usa y_test y y_pred_rf reales
y_test_demo = df['Class'].copy()
y_pred_demo = y_test_demo.copy()
# Introducir algunos errores
errors_fp = y_test_demo[y_test_demo == 0].sample(int(n_normal * 0.0005)).index
errors_fn = y_test_demo[y_test_demo == 1].sample(int(n_fraud * 0.11)).index
y_pred_demo.loc[errors_fp] = 1
y_pred_demo.loc[errors_fn] = 0
y_pred_proba_demo = y_test_demo.astype(float) # Simulación simple de probabilidades
y_pred_proba_demo.loc[errors_fp] = np.random.uniform(0.6, 0.9, size=len(errors_fp))
y_pred_proba_demo.loc[errors_fn] = np.random.uniform(0.1, 0.4, size=len(errors_fn))


# Estilo de los gráficos
sns.set_style("whitegrid", {'axes.grid' : False})
plt.style.use('dark_background')

# --- GRÁFICOS ---

# 1. Distribución de Clases
plt.figure(figsize=(8, 6))
ax = sns.countplot(x='Class', data=df, palette=['#00fff1', '#ff4b5c'])
plt.title('Distribución de Clases (0: Normal, 1: Fraude)', fontsize=16, color='white')
plt.ylabel('Frecuencia', color='white')
plt.xlabel('Clase', color='white')
plt.xticks(ticks=[0, 1], labels=['Normal', 'Fraude'], color='white')
plt.yticks(color='white')
ax.spines['left'].set_color('white')
ax.spines['bottom'].set_color('white')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
plt.savefig('assets/visuals/class_distribution.png', transparent=True, bbox_inches='tight')
plt.show()


# 2. Matriz de Confusión
cm = confusion_matrix(y_test_demo, y_pred_demo)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='BuPu', cbar=False,
            xticklabels=['Normal', 'Fraude'], yticklabels=['Normal', 'Fraude'],
            annot_kws={"size": 16, "color": "white"})
plt.title('Matriz de Confusión', fontsize=16, color='white')
plt.ylabel('Valor Real', color='white')
plt.xlabel('Predicción', color='white')
plt.xticks(color='white')
plt.yticks(color='white')
plt.savefig('assets/visuals/confusion_matrix.png', transparent=True, bbox_inches='tight')
plt.show()


# 3. Curva ROC
fpr, tpr, _ = roc_curve(y_test_demo, y_pred_proba_demo)
roc_auc = auc(fpr, tpr)
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='#00fff1', lw=2, label=f'Curva ROC (AUC = {roc_auc:0.2f})')
plt.plot([0, 1], [0, 1], color='white', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('Tasa de Falsos Positivos', color='white')
plt.ylabel('Tasa de Verdaderos Positivos', color='white')
plt.title('Curva ROC', fontsize=16, color='white')
plt.legend(loc="lower right")
plt.xticks(color='white')
plt.yticks(color='white')
ax = plt.gca()
ax.spines['left'].set_color('white')
ax.spines['bottom'].set_color('white')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
plt.savefig('assets/visuals/roc_curve.png', transparent=True, bbox_inches='tight')
plt.show()


# 4. Distribución de Montos
plt.figure(figsize=(10, 6))
sns.histplot(df[df['Amount'] < 500]['Amount'], bins=50, color='#00fff1', kde=True)
plt.title('Distribución de Montos de Transacción (hasta $500)', fontsize=16, color='white')
plt.xlabel('Monto ($)', color='white')
plt.ylabel('Frecuencia', color='white')
plt.xticks(color='white')
plt.yticks(color='white')
ax = plt.gca()
ax.spines['left'].set_color('white')
ax.spines['bottom'].set_color('white')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
plt.savefig('assets/visuals/amount_distribution.png', transparent=True, bbox_inches='tight')
plt.show()


# 5. Scatter Plot con PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(df.drop(['Time', 'Amount', 'Class'], axis=1))
df_pca = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])
df_pca['Class'] = df['Class']

plt.figure(figsize=(10, 8))
sns.scatterplot(x='PC1', y='PC2', hue='Class', data=df_pca, palette=['#00fff1', '#ff4b5c'], alpha=0.5, s=20)
plt.title('Visualización 2D con PCA', fontsize=16, color='white')
plt.xlabel('Componente Principal 1', color='white')
plt.ylabel('Componente Principal 2', color='white')
plt.legend(title='Clase', labels=['Normal', 'Fraude'])
plt.xticks(color='white')
plt.yticks(color='white')
ax = plt.gca()
ax.spines['left'].set_color('white')
ax.spines['bottom'].set_color('white')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
plt.savefig('assets/visuals/pca_scatter.png', transparent=True, bbox_inches='tight')
plt.show()
